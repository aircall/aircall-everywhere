{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////home/circleci/aircall-everywhere/index.js","webpack:////home/circleci/aircall-everywhere/src/javascripts/aircallPhone.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAA6D;;AAE9C,uIAAY,EAAC;;;;;;;;;;;;;ACF5B;AAAA;AACA,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iEAAiE,MAAM,QAAQ,IAAI;;AAEnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C;AACA;AACA,kCAAkC,aAAa;AAC/C;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,UAAU,gBAAgB,iBAAiB,aAAa,oBAAoB,WAAW,UAAU;AACjJ,KAAK;AACL;AACA;AACA;AACA,iDAAiD,oBAAoB;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C,UAAU;AACzD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO,2CAA2C;AAClD;AACA;;AAEA;AACA;AACA;AACA,SAAS,8DAA8D;AACvE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc,cAAc;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D,cAAc;;AAE5E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,wBAAwB;AACrD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS,kBAAkB,UAAU,gBAAgB;AACrD;AACA;;AAEA;AACA,iBAAiB,UAAU;AAC3B;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA,aAAa,2DAA2D;AACxE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iCAAiC,2BAA2B;AAC5D;AACA,OAAO;;AAEP;AACA;AACA,+BAA+B,UAAU;;AAEzC,+BAA+B,oBAAoB;AACnD,OAAO;AACP,KAAK;AACL,6BAA6B,oBAAoB;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEe,2EAAY,EAAC","file":"aircall-everywhere.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import AircallPhone from './src/javascripts/aircallPhone.js';\n\nexport default AircallPhone;\n","class AircallPhone {\n  constructor(opts = { debug: true }) {\n    // internal vars\n    // window object of loaded aircall phone\n    this.phoneWindow = null;\n    this.integrationSettings = {};\n    this.path = null;\n    this.userSettings = {};\n    this.eventsRegistered = {};\n\n    this.phoneLoginState = false;\n\n    const URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/gi;\n\n    // options passed\n    this.phoneUrl =\n      opts.phoneUrl !== undefined && URL_REGEX.test(opts.phoneUrl) === true\n        ? opts.phoneUrl\n        : 'https://phone.aircall.io';\n    this.domToLoadPhone = opts.domToLoadPhone;\n    this.integrationToLoad = opts.integrationToLoad;\n    this.path = opts.path;\n    this.debug = opts.debug;\n\n    // 3 different sizes: big/small/auto\n    this.size = opts.size || 'big';\n\n    this.onLogin = () => {\n      if (typeof opts.onLogin === 'function' && this.phoneLoginState === false) {\n        this.phoneLoginState = true;\n        const data = {\n          user: this.userSettings,\n        };\n        if (Object.keys(this.integrationSettings).length > 0) {\n          data.settings = this.integrationSettings;\n        }\n        opts.onLogin(data);\n      }\n    };\n\n    this.onLogout = () => {\n      if (typeof opts.onLogout === 'function') {\n        opts.onLogout();\n      }\n    };\n    // local window\n    this.w = opts.window || window;\n\n    // launch postmessage listener\n    this._messageListener();\n\n    // load phone in specified dom\n    if (!!this.domToLoadPhone) {\n      this._createPhoneIframe();\n    }\n  }\n\n  _resetData() {\n    this.phoneWindow = null;\n    this.path = null;\n    this.integrationSettings = {};\n    this.userSettings = {};\n    this.phoneLoginState = false;\n  }\n\n  _createPhoneIframe() {\n    let sizeStyle = '';\n    switch (this.size) {\n      case 'big':\n        sizeStyle = 'height:666px; width:376px;';\n        break;\n      case 'small':\n        sizeStyle = 'height:600px; width:376px;';\n        break;\n      case 'auto':\n        sizeStyle = 'height:100%; width:100%;';\n        break;\n    }\n\n    // we get the passed dom\n    try {\n      const el = document.querySelector(this.domToLoadPhone);\n      el.innerHTML = `<iframe allow=\"microphone; autoplay; clipboard-read; clipboard-write; hid\" src=\"${this.getUrlToLoad()}\" style=\"${sizeStyle}\"></iframe>`;\n    } catch (e) {\n      // couldnt query the dom wanted\n      this._log(\n        'error',\n        `[AircallEverywhere] [iframe creation] ${this.domToLoadPhone} not be found. Error:`,\n        e\n      );\n    }\n  }\n\n  _messageListener() {\n    this.w.addEventListener(\n      'message',\n      (event) => {\n        this._log('info', '[AircallEverywhere] [event listener] received event', event);\n        // we test if our format object is present. if not, we stop\n        const matchPrefixRegex = /^apm_phone_/;\n        if (!event.data || !event.data.name || !matchPrefixRegex.test(event.data.name)) {\n          return false;\n        }\n\n        // initialisation message\n        if (event.data.name === 'apm_phone_loaded') {\n          this._handleInitMessage(event);\n          return;\n        }\n\n        // integration settings sent by phone\n        if (event.data.name === 'apm_phone_integration_settings' && !!event.data.value) {\n          this.integrationSettings = event.data.value;\n          // init callback after settings received\n          this.onLogin();\n          return;\n        }\n\n        // phone logout\n        if (event.data.name === 'apm_phone_logout') {\n          // we clean data related to user\n          this._resetData();\n          this.onLogout();\n          return;\n        }\n\n        // loop over events registered\n        for (const eventName in this.eventsRegistered) {\n          if (event.data.name === `apm_phone_${eventName}`) {\n            // event triggered => we execute callback\n            this.eventsRegistered[eventName](event.data.value);\n          }\n        }\n      },\n      false\n    );\n  }\n\n  _handleInitMessage(event) {\n    // we keep the source\n    this.phoneWindow = {\n      source: event.source,\n      origin: event.origin,\n    };\n\n    if (!!event.data.value) {\n      this.userSettings = event.data.value;\n    }\n\n    // we answer init\n    this.phoneWindow.source.postMessage(\n      { name: 'apm_app_isready', path: this.path },\n      this.phoneWindow.origin\n    );\n\n    // we ask for integration settings\n    if (!!this.integrationToLoad) {\n      this.phoneWindow.source.postMessage(\n        { name: 'apm_app_get_settings', value: this.integrationToLoad },\n        this.phoneWindow.origin\n      );\n    } else {\n      // init callback now if present\n      this.onLogin();\n    }\n  }\n\n  _log(action, ...restArguments) {\n    if (typeof action !== 'string') {\n      throw new Error('[AircallEverywhere] [_log] Must provide valid console action');\n    }\n\n    // logging turned off, don't do anything\n    if (!this.debug) {\n      return;\n    }\n\n    // if valid action, execute with given args, otherwise default to info\n    console[action] ? console[action](...restArguments) : console.info(...restArguments);\n  }\n\n  getUrlToLoad() {\n    return `${this.phoneUrl}?integration=generic`;\n  }\n\n  on(eventName, callback) {\n    if (!eventName || typeof callback !== 'function') {\n      throw new Error(\n        '[AircallEverywhere] [on function] Invalid parameters format. Expected non empty string and function'\n      );\n    }\n    this.eventsRegistered[eventName] = callback;\n  }\n\n  _handleSendError(error, callback) {\n    if (!error || !error.code) {\n      // should not happen, unknown error\n      error = {\n        code: 'unknown_error',\n      };\n    }\n    // errors sent by the phone for specific events are not handled since they should have their code AND message\n    if (!!error && !error.message) {\n      switch (error.code) {\n        case 'unknown_error':\n          error.message = 'Unknown error. Contact aircall developers dev@aircall.io';\n          break;\n        case 'no_event_name':\n          error.message = 'Invalid parameter eventName. Expected an non empty string';\n          break;\n        case 'not_ready':\n          error.message =\n            'Aircall Phone has not been identified yet or is not ready. Wait for \"onLogin\" callback';\n          break;\n        case 'no_answer':\n          error.message = 'No answer from the phone. Check if the phone is logged in';\n          break;\n        case 'invalid_response':\n          error.message =\n            'Invalid response from the phone. Contact aircall developers dev@aircall.io';\n          break;\n        default:\n          // specific error without a message. Should not happen\n          error.message = 'Generic error message';\n          break;\n      }\n    }\n\n    // we log the error\n    this._log('error', `[AircallEverywhere] [send function] ${error.message}`);\n\n    // we send the callback with the error\n    if (typeof callback === 'function') {\n      callback(false, error);\n    }\n  }\n\n  send(eventName, data, callback) {\n    if (typeof data === 'function' && !callback) {\n      callback = data;\n      data = undefined;\n    }\n\n    if (!eventName) {\n      this._handleSendError({ code: 'no_event_name' }, callback);\n      return false;\n    }\n\n    if (!!this.phoneWindow && !!this.phoneWindow.source) {\n      let responseTimeout = null;\n      let timeoutLimit = 2000;\n\n      // we send the message\n      this.phoneWindow.source.postMessage(\n        { name: `apm_app_${eventName}`, value: data },\n        this.phoneWindow.origin\n      );\n\n      // we wait for a response to this message\n      this.on(`${eventName}_response`, (response) => {\n        // we have a response, we remove listener and return the callback\n        this.removeListener(`${eventName}_response`);\n        clearTimeout(responseTimeout);\n        // we evaluate response\n        if (!!response && response.success === false) {\n          // phone answers with an error\n          this._handleSendError(\n            { code: response.errorCode, message: response.errorMessage },\n            callback\n          );\n        } else if (!!response && response.success === true) {\n          // phone answer a succes with its response\n          if (typeof callback === 'function') {\n            callback(true, response.data);\n          }\n        } else {\n          // phone answer is invalid\n          this._handleSendError({ code: 'invalid_response' }, callback);\n        }\n      });\n\n      responseTimeout = setTimeout(() => {\n        // if no response, we remove listener\n        this.removeListener(`${eventName}_response`);\n\n        this._handleSendError({ code: 'no_answer' }, callback);\n      }, timeoutLimit);\n    } else {\n      this._handleSendError({ code: 'not_ready' }, callback);\n      return false;\n    }\n  }\n\n  removeListener(eventName) {\n    if (!this.eventsRegistered[eventName]) {\n      return false;\n    }\n\n    Object.keys(this.eventsRegistered)\n      .filter((key) => key === eventName)\n      .forEach((key) => delete this.eventsRegistered[key]);\n    return true;\n  }\n\n  isLoggedIn(callback) {\n    // we simply send an event and send its result.\n    this.send('is_logged_in', (success) => {\n      callback(success);\n    });\n  }\n}\n\nexport default AircallPhone;\n"],"sourceRoot":""}